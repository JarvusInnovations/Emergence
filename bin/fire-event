#!/usr/bin/env node


require('yargs')
    .command('$0 <site> <event> <context>', 'Fire event within site', yargs => {
        yargs
            .positional('site', {
                describe: 'Handle of site to fire event within'
            })
            .positional('event', {
                describe: 'Name of event to fire'
            })
            .positional('context', {
                describe: 'Context path to fire event within'
            })
    }, argv => {
        var path = require('path'),
            kernelConfig = require('/emergence/config.json'),
            socketPath = kernelConfig.services.plugins.php.socketPath || '/emergence/services/run/php-fpm/php-fpm.sock',
            socketHostMatch = socketPath.match(/^(?<host>[^\/:]+):(?<port>\d+)$/),
            documentRoot = path.resolve(__dirname, '../php-bootstrap'),
            PHPFPM = require('node-phpfpm'),
            phpClientConfig = {
                documentRoot: documentRoot + '/'
            },
            payload = Object.assign({}, argv);

        if (socketHostMatch) {
            phpClientConfig.host = socketHostMatch.groups.host;
            phpClientConfig.port = socketHostMatch.groups.port;
        } else {
            phpClientConfig.sockFile = socketPath;
        }

        delete payload._;
        delete payload.help;
        delete payload.version;
        delete payload.site;
        delete payload.event;
        delete payload.context;
        delete payload['$0'];

        // execute event via PHP-FPM interface
        new PHPFPM(phpClientConfig).run({
            uri: 'event.php',
            json: {
                site: argv.site,
                event: argv.event,
                context: argv.context,
                payload: payload
            }
        }, function (err, output, phpErrors) {
            if (err == 99) console.error('PHPFPM server error');
            console.log(output);
            if (phpErrors) console.error(phpErrors);
        });

    })
    .argv;
